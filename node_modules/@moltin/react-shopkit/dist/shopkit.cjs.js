'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var PropTypes = _interopDefault(require('prop-types'));
var request = require('@moltin/request');

var context = React.createContext();

var Provider = context.Provider,
    Consumer = context.Consumer;

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var objectWithoutProperties = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var Shopkit = function (_Component) {
  inherits(Shopkit, _Component);

  function Shopkit() {
    var _ref;

    classCallCheck(this, Shopkit);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = possibleConstructorReturn(this, (_ref = Shopkit.__proto__ || Object.getPrototypeOf(Shopkit)).call.apply(_ref, [this].concat(args)));

    _this.api = new request.createClient({
      client_id: _this.props.clientId,
      application: 'react-shopkit'
    });

    _this.updateCartState = function (_ref2) {
      var data = _ref2.data,
          meta = _ref2.meta;
      return _this.setState({
        cartItems: data,
        cartTotal: meta.display_price.with_tax.formatted,
        cartCount: data.length,
        meta: meta
      });
    };

    _this._handleAddToCart = function (id, quantity) {
      return _this.api.post('carts/' + _this.props.cartId + '/items', {
        type: 'cart_item',
        id: id,
        quantity: quantity
      }).then(_this.updateCartState).then(_this.props.showCartOnSuccess && _this._showCart).catch(function (_ref3) {
        var errors = _ref3.errors;
        return console.log(errors);
      });
    };

    _this._handleQuantityChange = function (id, quantity) {
      return _this.api.put('carts/' + _this.props.cartId + '/items/' + id, {
        type: 'cart_item',
        id: id,
        quantity: quantity
      }).UpdateItemQuantity(itemId, quantity).then(_this.updateCartState).catch(function (_ref4) {
        var errors = _ref4.errors;
        return console.log(errors);
      });
    };

    _this._handleRemoveFromCart = function (id) {
      return _this.api.delete('carts/' + _this.props.cartId + '/items/' + id).then(_this.updateCartState).catch(function (_ref5) {
        var errors = _ref5.errors;
        return console.log(errors);
      });
    };

    _this._showCart = function () {
      return _this.setState(function (state) {
        return _extends({}, state, { cartShown: true });
      });
    };

    _this._handleShowCart = function () {
      return _this.setState(function (state) {
        return { cartShown: !state.cartShown };
      });
    };

    _this._handleCheckout = function (customer, billing, shipping) {
      return _this.api.Cart().Checkout(customer, billing, shipping);
    };

    if (!_this.props.clientId) {
      throw new Error('Please provide a Moltin client ID');
    }

    _this.state = {
      cartItems: [],
      cartShown: false,
      cartTotal: null
    };
    return _this;
  }

  createClass(Shopkit, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.api.get('carts/' + this.props.cartId + '/items').then(this.updateCartState).catch(function (_ref6) {
        var errors = _ref6.errors;
        return console.log(errors);
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          props = objectWithoutProperties(_props, ['children']);


      return React__default.createElement(
        Provider,
        {
          value: _extends({}, this.state, props, {
            api: this.api,
            showCart: this._handleShowCart,
            addToCart: this._handleAddToCart,
            updateCartQuantity: this._handleQuantityChange,
            removeFromCart: this._handleRemoveFromCart,
            handleCheckout: this._handleCheckout
          }) },
        children
      );
    }
  }]);
  return Shopkit;
}(React.Component);

Shopkit.propTypes = {
  clientId: PropTypes.string.isRequired,
  color: PropTypes.string,
  cartId: PropTypes.string,
  showCartOnSuccess: PropTypes.bool
};
Shopkit.defaultProps = {
  color: '#FFE285',
  cartId: request.createCartIdentifier(),
  showCartOnSuccess: false
};

var CartButtonConnector = function (_Component) {
  inherits(CartButtonConnector, _Component);

  function CartButtonConnector() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, CartButtonConnector);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = CartButtonConnector.__proto__ || Object.getPrototypeOf(CartButtonConnector)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      currentIndex: 0
    }, _this.goBack = function () {
      return _this.setState(function (state) {
        return {
          currentIndex: state.currentIndex - 1
        };
      });
    }, _this.goForward = function () {
      return _this.setState(function (state) {
        return {
          currentIndex: state.currentIndex + 1
        };
      });
    }, _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(CartButtonConnector, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var currentIndex = this.state.currentIndex;

      var isCart = currentIndex === 0;

      return React__default.createElement(
        Consumer,
        null,
        function (_ref2) {
          var cartTotal = _ref2.cartTotal,
              cartCount = _ref2.cartCount,
              cartItems = _ref2.cartItems,
              cartShown = _ref2.cartShown,
              showCart = _ref2.showCart,
              updateCartQuantity = _ref2.updateCartQuantity,
              removeFromCart = _ref2.removeFromCart,
              handleCheckout = _ref2.handleCheckout;
          return _this2.props.children(_extends({
            total: cartTotal,
            count: cartCount,
            items: cartItems,
            shown: cartShown,
            onClick: showCart,
            isCart: isCart,
            goForward: _this2.goForward,
            goBack: _this2.goBack,
            updateCartQuantity: updateCartQuantity,
            removeFromCart: removeFromCart,
            handleCheckout: handleCheckout
          }, _this2.state, _this2.props));
        }
      );
    }
  }]);
  return CartButtonConnector;
}(React.Component);

var Product = function (_Component) {
  inherits(Product, _Component);

  function Product() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, Product);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = Product.__proto__ || Object.getPrototypeOf(Product)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      loading: true,
      error: null,
      data: {}
    }, _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(Product, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      this.props.api.get('products/' + this.props.id + '?include=main_image').then(function (_ref2) {
        var data = _ref2.data,
            main_images = _ref2.included.main_images;

        var imageId = data.relationships.main_image ? data.relationships.main_image.data.id : false;

        _this2.setState({
          loading: false,
          data: _extends({}, data, {
            image: imageId ? main_images.find(function (img) {
              return img.id === imageId;
            }).link.href : ''
          })
        });
      }).catch(function (_ref3) {
        var errors = _ref3.errors;
        return console.log(errors);
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return this.props.children(_extends({}, this.state));
    }
  }]);
  return Product;
}(React.Component);

var ProductConnector = function (_Component) {
  inherits(ProductConnector, _Component);

  function ProductConnector() {
    classCallCheck(this, ProductConnector);
    return possibleConstructorReturn(this, (ProductConnector.__proto__ || Object.getPrototypeOf(ProductConnector)).apply(this, arguments));
  }

  createClass(ProductConnector, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      return React__default.createElement(
        Consumer,
        null,
        function (ctx) {
          return React__default.createElement(Product, _extends({}, ctx, _this2.props));
        }
      );
    }
  }]);
  return ProductConnector;
}(React.Component);

var BuyButtonConnector = function (_Component) {
  inherits(BuyButtonConnector, _Component);

  function BuyButtonConnector() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, BuyButtonConnector);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = BuyButtonConnector.__proto__ || Object.getPrototypeOf(BuyButtonConnector)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      qty: 1
    }, _this._handleUpdateQty = function (qty) {
      return _this.setState({
        qty: qty
      });
    }, _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(BuyButtonConnector, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var qty = this.state.qty;
      var _props = this.props,
          id = _props.id,
          showQty = _props.showQty,
          onClick = _props.onClick,
          props = objectWithoutProperties(_props, ['id', 'showQty', 'onClick']);


      return React__default.createElement(
        Consumer,
        null,
        function (_ref2) {
          var addToCart = _ref2.addToCart,
              color = _ref2.color;

          return _this2.props.children(_extends({}, _this2.state, props, {
            color: _this2.props.color || color,
            changeQty: _this2._handleUpdateQty,
            addToCart: addToCart.bind(_this2, id, qty)
          }));
        }
      );
    }
  }]);
  return BuyButtonConnector;
}(React.Component);

exports.Shopkit = Shopkit;
exports.CartButton = CartButtonConnector;
exports.Product = ProductConnector;
exports.BuyButton = BuyButtonConnector;
